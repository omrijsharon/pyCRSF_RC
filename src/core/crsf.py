import serial
import struct

# Constants
CRSF_MAX_CHANNEL = 16
CRSF_FRAME_SIZE_MAX = 64
RADIO_ADDRESS = 0xEA
TYPE_CHANNELS = 0x16
CRSF_DIGITAL_CHANNEL_MIN = 172
CRSF_DIGITAL_CHANNEL_MAX = 1811
SERIAL_BAUDRATE = 115200
CRSF_TIME_BETWEEN_FRAMES_US = 20000 # in microseconds
ELRS_ADDRESS = 0xEE
TYPE_SETTINGS_WRITE = 0x2D
ADDR_RADIO = 0xEA
CRSF_PACKET_SIZE = 26

# CRC Lookup table
crsf_crc8tab = [
    0x00, 0xD5, 0x7F, 0xAA, 0xFE, 0x2B, 0x81, 0x54, 0x29, 0xFC, 0x56, 0x83, 0xD7, 0x02, 0xA8, 0x7D,
    0x52, 0x87, 0x2D, 0xF8, 0xAC, 0x79, 0xD3, 0x06, 0x7B, 0xAE, 0x04, 0xD1, 0x85, 0x50, 0xFA, 0x2F,
    0xA4, 0x71, 0xDB, 0x0E, 0x5A, 0x8F, 0x25, 0xF0, 0x8D, 0x58, 0xF2, 0x27, 0x73, 0xA6, 0x0C, 0xD9,
    0xF6, 0x23, 0x89, 0x5C, 0x08, 0xDD, 0x77, 0xA2, 0xDF, 0x0A, 0xA0, 0x75, 0x21, 0xF4, 0x5E, 0x8B,
    0x9D, 0x48, 0xE2, 0x37, 0x63, 0xB6, 0x1C, 0xC9, 0xB4, 0x61, 0xCB, 0x1E, 0x4A, 0x9F, 0x35, 0xE0,
    0xCF, 0x1A, 0xB0, 0x65, 0x31, 0xE4, 0x4E, 0x9B, 0xE6, 0x33, 0x99, 0x4C, 0x18, 0xCD, 0x67, 0xB2,
    0x39, 0xEC, 0x46, 0x93, 0xC7, 0x12, 0xB8, 0x6D, 0x10, 0xC5, 0x6F, 0xBA, 0xEE, 0x3B, 0x91, 0x44,
    0x6B, 0xBE, 0x14, 0xC1, 0x95, 0x40, 0xEA, 0x3F, 0x42, 0x97, 0x3D, 0xE8, 0xBC, 0x69, 0xC3, 0x16,
    0xEF, 0x3A, 0x90, 0x45, 0x11, 0xC4, 0x6E, 0xBB, 0xC6, 0x13, 0xB9, 0x6C, 0x38, 0xED, 0x47, 0x92,
    0xBD, 0x68, 0xC2, 0x17, 0x43, 0x96, 0x3C, 0xE9, 0x94, 0x41, 0xEB, 0x3E, 0x6A, 0xBF, 0x15, 0xC0,
    0x4B, 0x9E, 0x34, 0xE1, 0xB5, 0x60, 0xCA, 0x1F, 0x62, 0xB7, 0x1D, 0xC8, 0x9C, 0x49, 0xE3, 0x36,
    0x19, 0xCC, 0x66, 0xB3, 0xE7, 0x32, 0x98, 0x4D, 0x30, 0xE5, 0x4F, 0x9A, 0xCE, 0x1B, 0xB1, 0x64,
    0x72, 0xA7, 0x0D, 0xD8, 0x8C, 0x59, 0xF3, 0x26, 0x5B, 0x8E, 0x24, 0xF1, 0xA5, 0x70, 0xDA, 0x0F,
    0x20, 0xF5, 0x5F, 0x8A, 0xDE, 0x0B, 0xA1, 0x74, 0x09, 0xDC, 0x76, 0xA3, 0xF7, 0x22, 0x88, 0x5D,
    0xD6, 0x03, 0xA9, 0x7C, 0x28, 0xFD, 0x57, 0x82, 0xFF, 0x2A, 0x80, 0x55, 0x01, 0xD4, 0x7E, 0xAB,
    0x84, 0x51, 0xFB, 0x2E, 0x7A, 0xAF, 0x05, 0xD0, 0xAD, 0x78, 0xD2, 0x07, 0x53, 0x86, 0x2C, 0xF9
]


def crsf_crc8(data):
    crc = 0
    for b in data:
        crc = crsf_crc8tab[crc ^ b]
    return crc


class CRSF:
    def __init__(self, port):
        self.port = serial.Serial(port, SERIAL_BAUDRATE)

    def crsf_prepare_data_packet(self, channels):
        if len(channels) != 16:
            raise ValueError("Channels array must have 16 elements.")

        packet = [0] * 26

        # Header and length/type information
        packet[0] = ELRS_ADDRESS & 0xFF
        packet[1] = 24 & 0xFF
        packet[2] = TYPE_CHANNELS & 0xFF

        # Channel data
        packet[3] = (channels[0] & 0x07FF) & 0xFF
        packet[4] = ((channels[0] & 0x07FF) >> 8 | (channels[1] & 0x07FF) << 3) & 0xFF
        packet[5] = ((channels[1] & 0x07FF) >> 5 | (channels[2] & 0x07FF) << 6) & 0xFF
        packet[6] = ((channels[2] & 0x07FF) >> 2) & 0xFF
        packet[7] = ((channels[2] & 0x07FF) >> 10 | (channels[3] & 0x07FF) << 1) & 0xFF
        packet[8] = ((channels[3] & 0x07FF) >> 7 | (channels[4] & 0x07FF) << 4) & 0xFF
        packet[9] = ((channels[4] & 0x07FF) >> 4 | (channels[5] & 0x07FF) << 7) & 0xFF
        packet[10] = ((channels[5] & 0x07FF) >> 1) & 0xFF
        packet[11] = ((channels[5] & 0x07FF) >> 9 | (channels[6] & 0x07FF) << 2) & 0xFF
        packet[12] = ((channels[6] & 0x07FF) >> 6 | (channels[7] & 0x07FF) << 5) & 0xFF
        packet[13] = ((channels[7] & 0x07FF) >> 3) & 0xFF
        packet[14] = (channels[8] & 0x07FF) & 0xFF
        packet[15] = ((channels[8] & 0x07FF) >> 8 | (channels[9] & 0x07FF) << 3) & 0xFF
        packet[16] = ((channels[9] & 0x07FF) >> 5 | (channels[10] & 0x07FF) << 6) & 0xFF
        packet[17] = ((channels[10] & 0x07FF) >> 2) & 0xFF
        packet[18] = ((channels[10] & 0x07FF) >> 10 | (channels[11] & 0x07FF) << 1) & 0xFF
        packet[19] = ((channels[11] & 0x07FF) >> 7 | (channels[12] & 0x07FF) << 4) & 0xFF
        packet[20] = ((channels[12] & 0x07FF) >> 4 | (channels[13] & 0x07FF) << 7) & 0xFF
        packet[21] = ((channels[13] & 0x07FF) >> 1) & 0xFF
        packet[22] = ((channels[13] & 0x07FF) >> 9 | (channels[14] & 0x07FF) << 2) & 0xFF
        packet[23] = ((channels[14] & 0x07FF) >> 6 | (channels[15] & 0x07FF) << 5) & 0xFF
        packet[24] = ((channels[15] & 0x07FF) >> 3) & 0xFF

        # CRC
        packet[25] = crsf_crc8(packet[2:])
        return packet

    def crsf_prepare_cmd_packet(self, command, value):
        packet_cmd = bytearray([ELRS_ADDRESS, 6, TYPE_SETTINGS_WRITE, ELRS_ADDRESS, ADDR_RADIO, command, value])
        packet_cmd.append(crsf_crc8(packet_cmd[2:]))
        return packet_cmd

    def crsf_write_packet(self, packet):
        self.port.write(packet)


# Example usage
if __name__ == "__main__":
    crsf = CRSF('/dev/ttyUSB0')  # Change this to your serial port
    channels = [1000] * 16  # Example channel data
    data_packet = crsf.crsf_prepare_data_packet(channels)
    # cmd_packet = crsf.crsf_prepare_cmd_packet(0x01, 0xFF)  # Example command and value

    crsf.crsf_write_packet(data_packet)
    # crsf.crsf_write_packet(cmd_packet)